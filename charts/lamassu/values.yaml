global:
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  imagePullPolicy: Always
# Downstream TLS (API Gateway)
tls:
  # -- TLS certificate provider to use for the API Gateway. Allowed values are: `certManager`, `external`
  type: certManager
  certManagerOptions:
    # -- CertManager ClusterIssuer to use to sign the certificate for the API Gateway.
    clusterIssuer: ""
    # -- CertManager Issuer to use to sign the certificate for the API Gateway. Ignored if `clusterIssuer` is set. If left empty, a self signed certificate will be used.
    issuer: ""
    # -- Duration for the certificate to be valid
    certSpec:
      commonName: "dev.lamassu.io"
      hostnames:
      - "dev.lamassu.io"
      addresses:
      duration: "2160h"  # 2160h == 90days
  externalOptions:
    # -- Secret name for the TLS certificate to be used for the API Gateway (the secret at least must have `tls.crt` and `tls.key` keys)
    secretName: ""

gateway:
  extraRouting:
  addresses:
  ports:
    http: 80
    https: 443

postgres:
  # -- Hostname for the PostgreSQL server
  hostname: ""
  # -- Port for the PostgreSQL server
  port: 5432
  # -- Username to be used to authenticate with the PostgreSQL server
  username: ""
  # -- Password to be used to authenticate with the PostgreSQL server
  password: ""
amqp:
  # -- Hostname for the AMQP server
  hostname: ""
  # -- Port for the AMQP server
  port: 5672
  # -- Username to be used to authenticate with the AMQP server
  username: ""
  # -- Password to be used to authenticate with the AMQP server
  password: ""
  # -- Enable AMQP over TLS (aka AMPQS)
  tls: false
auth:
  oidc:
    frontend:
      # -- Client ID to be used as the OIDC client for the frontend
      clientId: "frontend"
      # -- URL pointing to the OIDC provider's base path to build the OIDC well-known URL (This is the complete URL preceding the "/.well-known/openid-configuration" URL). Can be a JS expression
      authority: https://${window.location.host}/auth/realms/lamassu
      awsCognito:
        # -- Enable AWS Cognito as the OIDC provider for the frontend
        enabled: false
        # -- AWS Cognito Hosted UI Domain
        hostedUiDomain: ""
    apiGateway:
      # -- URL pointing to the issuer's public key set to validate the JWT tokens.
      jwks:
        # -- Protocol to use to fetch the public key set. Allowed values are: `http`, `https`
        protocol: http
        # -- Hostname to use to fetch the public key set
        host: keycloak
        # -- Port to use to fetch the public key set
        port: 80
        # -- Path to use to fetch the public key set
        path: /auth/realms/lamassu/protocol/openid-connect/certs
  authorization:
    # -- Claim to use to find and filter the user's roles
    rolesClaim: realm_access.roles
    roles:
      # -- Role association to be used to authorize the user as LAMASSU's admin
      admin: pki-admin
services:
  ui:
    # -- Docker image for the UI component
    image: ghcr.io/lamassuiot/lamassu-ui:3.2.1
  va:
    # -- Docker image for the VA component
    image: ghcr.io/lamassuiot/lamassu-va:3.2.2
  ca:
    # -- Domain to be used while signing/generating new CAs and certificates
    domains:
    - dev.lamassu.io
    # -- Docker image for the CA component
    image: ghcr.io/lamassuiot/lamassu-ca:3.2.2
    monitoring:
      # -- Frequency to check the CA's health status uses CRON syntax. Can also be specified at a "second" level by adding one extra term
      frequency: "* * * * *"
    cryptoEngines:
      # -- Default engine ID to be used for the CA component
      defaultEngineID: "filesystem-1"
      engines:
        - id: "filesystem-1"
          # filesystem | pkcs11 | hashicorp_vault | aws_kms | aws_secrets_manager
          type: "filesystem"
          metadata:
            prod-ready: "false"
          storage_directory: "/crypto/fs"
  deviceManager:
    # -- Docker image for the Device Manager component
    image: ghcr.io/lamassuiot/lamassu-devmanager:3.2.2
  dmsManager:
    # -- Docker image for the DMS Manager component
    image: ghcr.io/lamassuiot/lamassu-dmsmanager:3.2.2
  alerts:
    # -- Docker image for the Alerts component
    image: ghcr.io/lamassuiot/lamassu-alerts:3.2.2
    smtp_server:
      # -- email address to use as the sender of the alerts
      from: ""
      # -- skip TLS verification
      insecure: false
      # -- use TLS for the SMTP connection
      enable_ssl: true
      # -- SMTP server username
      username: ""
      # -- SMTP server password
      password: ""
      # -- SMTP server hostname
      host: ""
      # -- SMTP server port
      port: 25
  connectors:
toolbox:
  image: ghcr.io/lamassuiot/toolbox:2.2.0
